{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Baldi's Basics Classic - Simplified Open Source","text":"<p>A decompile originally made just for fun, intended to be a fix for the classic version 1.4.3's many issues and flaws while keeping the normal basic play part of the whole thing. Also aiming to be easier to starter baldi modders and for the ones that want their mod to look like BB+ &amp; BBCR.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>A Decent Computer</li> <li>Unity 2020.3.12f1 (anything higher should work though)</li> <li>Basic/Decent preunderstanding of C# &amp; Unity</li> </ul>"},{"location":"#credits","title":"Credits","text":"<ul> <li>JustSadColored4 - Head Creator, Programmer, Main Optimizer.</li> <li>CatsheeRS - Co-Creator, 2nd Programmer.</li> <li>MistyCoder - Extra Helper, 3rd Programmer, Program Help.</li> <li>Scott Powers - Original Decompile Creator.</li> </ul>"},{"location":"#very-special-thanks","title":"Very Special Thanks","text":"<ul> <li>Saintza4 - Improved Swinging Door Script.</li> <li>MarkSonTheGamer - Custom Control Mapper.</li> <li>PhonoExpunged29 - Code Borrowing.</li> <li>YuraSuper2048 &amp; Michael Does Gaming - Some Shaders, Code Borrowing.</li> <li>Axel_lol - Cursor Pop-Up Script.</li> <li>Barnerror - Audio Queue &amp; Player Velocity Help.</li> <li>StepanSychev - Principal Tweaking.</li> <li>MichaelJak - Tile Lighting System.</li> <li>Badrum - Optimized Text Underliner.</li> <li>Redzils - Playtime Walk Back Code, Optimized Gravity Code.</li> <li>LarryLittle - Smooth Red Light Fade Code.</li> </ul>"},{"location":"#where-to-download","title":"Where To Download","text":"<ul> <li>Itch.Io</li> <li>GameBanana</li> <li>GameJolt</li> <li>GitHub</li> </ul>"},{"location":"about/","title":"About","text":"<p>Simplified Open Source is a brand new Baldi open source project that makes everything more optimized and is easy for people to add and change more certain things. As this (might) be the only decompile that's at least mod starter friendly.</p>"},{"location":"about/#changes","title":"Changes","text":"<p>We've changed about almost everything from the base 1.4.3 decompile base, and here they are:</p> <ul> <li>Changed all planes into quads.</li> <li>Added gravity to the player.</li> <li>Added tile lighting. (might get overhauled in the future)</li> <li>Some sprites have been tweaked to use a sprite sheet instead.</li> <li>Made the hud, environments, and some functions act and look more like in BB+ &amp; BBCR.</li> <li>Optimized as much of the normal code from most of the script as possible.</li> <li>Removed some useless scripts that don't even get used. (Mainly the Mobile Controls)</li> <li>Added a brand new debug mode for when the debug bool is on.</li> <li>Completely reworked the item system.</li> <li>Added a brand new custom NPC class so it can be easier to add custom NPCs.</li> </ul>"},{"location":"features/itemsystem/","title":"Item System","text":""},{"location":"features/itemsystem/#how-does-the-item-system-work","title":"How Does the Item System Work?","text":"<p>The item system is split into 2 sections:</p> <ul> <li>ItemManager</li> <li>BaseItem</li> </ul> <p>The ItemManager manages the players inventory and item data.  BaseItem is an inhertiable class, which items use for functionality.</p>"},{"location":"features/itemsystem/#creating-an-item","title":"Creating an Item","text":"<p>There's 2 steps to creating an item</p>"},{"location":"features/itemsystem/#step-1-writing-code","title":"Step 1 - Writing Code","text":"<p>Create a new class and name it whatever you want.  You should inherit from BaseItem. Right now, your code should look like this: Item.cs<pre><code>using System.Collections;\nusing UnityEngine;\n\npublic class Item : BaseItem\n{\n    void Start()\n    {\n    }\n\n    void Update()\n    {\n    }\n}\n</code></pre></p> <p>Here, you can inherit from many different methods such as: <pre><code>public virtual bool OnUse() { }\npublic virtual void OnSelect() { }\npublic virtual void OnDeselect() { }\npublic virtual void OnPickup() { }\n</code></pre></p> <p>When you're inheriting from <code>base.OnUse()</code>, you need to return a boolean, false will mean it shouldn't be counted as a use, true will mean it should be counted as a use. DONT USE THIS FOR ITEM USE COUNTS, AS THAT'S PREHANDLED BY SIMPLIFIED. Instead, use it for situations like when the player has used the quarter, but theres no vending machine infront of them, so the item doesnt get removed.</p> <p>It is automatically reverted back to false after the method has ended.</p> Item_OnUse<pre><code>using System.Collections;\nusing UnityEngine;\n\npublic class Item : BaseItem\n{\n    public override bool OnUse()\n    {\n        Debug.Log(\"use :o\");\n        return true;\n    }\n}\n</code></pre> <p>Another method, <code>SendRay(string Tag, out RaycastHit RayHit, double Range = 10)</code>, will return whether or not it hit a GameObject with the specified tag in argument 1 and the raycastHit object.</p> <p>This can be wrapped in an if statement like: Item_SendRayAndDontRemove.cs<pre><code>using System.Collections;\nusing UnityEngine;\n\npublic class Item : BaseItem\n{\n    public override bool OnUse()\n    {\n        if (SendRay(\"Door\", out RaycastHit Ray))\n        {\n            Debug.Log($\"found {Ray.transform.gameObject.name} :D\");\n            return true;\n        }\n\n        return false;\n    }\n}\n</code></pre></p>"},{"location":"features/itemsystem/#step-2-creating-the-object","title":"Step 2 - Creating the Object","text":"<p>Go to your School scene, and open up the ItemManager gameobject to reveal all of its children. Create a new empty gameobject and name it the name of your script, now attach the script to it. Fill out all details like:</p> <ul> <li>Name</li> <li>Big Sprite</li> <li>Small Sprite</li> <li>Uses</li> </ul>"},{"location":"features/itemsystem/#step-3-assigning-to-a-pickup-script","title":"Step 3 - Assigning to a Pickup Script","text":"<p>Now your item should be ready to be used, but you need to assign it to a pickup script, to do this, simply note down your items ID. To get the Item ID, it's simply how many items are above it + 1 So for example, BSODA has an ID of 4, whilst the quarter has an ID of 5 because it is one below the BSODA.</p> <p>Here's a list of every items ID:</p> <ul> <li>Nothing - 0</li> <li>Zesty Bar - 1</li> <li>Swinging Door Lock - 2</li> <li>Principals Keys - 3</li> <li>BSODA - 4</li> <li>Quarter - 5</li> <li>Tape - 6</li> <li>Alarm Clock - 7</li> <li>WD-NS - 8</li> <li>Safety Scissors - 9</li> <li>Boots - 10</li> </ul> <p>Once you've gotten your ID, simply go to the pickup script of your choice, and change the <code>Item ID</code> field, to your items You'll eventually learn them all :D</p>"},{"location":"features/itemsystem/#item-manager-methods","title":"Item Manager Methods","text":"<p>If you're a little bit of a \ud83e\udd13 you can read ahead to learn about the APIs the item manager has</p> <p><code>Instance</code> its just a singleton, bro.</p> <p><code>UpdateItemUI</code> force an update of the item HUD</p> <p><code>GetItem(string name)</code> returns a BaseItem from the given name</p> <p><code>GetItem(int id)</code> returns a BaseItem from the given id</p> <p><code>AddItem(BaseItem item)</code> adds an item to the item index. its id will be the next available free id</p> <p><code>RemoveItem(string name)</code> removes an item from the item index based on the given name. might break tho i didnt test lmao</p> <p><code>RemoveItem(BaseItem item)</code> removes the item from the item index. might break tho i didnt test lmao</p> <p><code>GetSelectedItem()</code> returns the currently selected item id</p> <p><code>GetSelectedItemObject()</code> returns the selected item object / instance, and creates one if it doesnt exist</p> <p><code>CollectItem(int ItemID, BaseItem instance == null)</code> collects an item, if instance is null a new instance is automaticlzly created, if its present it will be the instance of the item</p> <p><code>ReplaceCurrentItem(int ItemID)</code> yeah it ust replaces the current item. its just for the vending machine yeah idk</p>"},{"location":"features/itemsystem/#how-does-this-work","title":"How Does This Work?","text":"<p>great question. figure it out yourself then submit a pr pwetty pwease</p>"},{"location":"features/splashscreen/","title":"Custom Splash Screen","text":""},{"location":"features/splashscreen/#how-to-add-a-brand-new-screen","title":"How To Add a Brand New Screen","text":"<p>This section only has one part so it should be easy to understand:</p> <ul> <li>The SplashScreenScript is designed to display a sequence of your custom splash screens with an optional sound effect + a fade-out transition. It provides an organized way to showcase your logos or branding screens when the application starts.</li> </ul>"}]}